!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/2614dbe1/
Application	http/lib/http/application.ex	/^defmodule Http.Application do$/;"	m
Fibonacci	fibonacci.exs	/^defmodule Fibonacci do$/;"	m
Fibonacci2	fibonacci.exs	/^defmodule Fibonacci2 do #more elixir like solution$/;"	m
Fibonacci3	fibonacci.exs	/^defmodule Fibonacci3 do #optimized func$/;"	m
FibonacciI	fibonacci.exs	/^defmodule FibonacciI do$/;"	m
Http	http/README.md	/^# Http$/;"	c
Http	http/lib/http.ex	/^defmodule Http do$/;"	m
HttpTest	http/test/http_test.exs	/^defmodule HttpTest do$/;"	m
Installation	http/README.md	/^## Installation$/;"	s
MixProject	http/mix.exs	/^defmodule Http.MixProject do$/;"	m
accept	http/lib/http.ex	/^  def accept(socket) do$/;"	f	module:Http	access:public
application	http/mix.exs	/^  def application do$/;"	f	module:MixProject	access:public
child_spec	http/lib/http.ex	/^  def child_spec(opts) do$/;"	f	module:Http	access:public
clojure_elixir	README.md	/^# clojure_elixir$/;"	c
compute	fibonacci.cljc	/^(defn compute$/;"	f	namespace:fibonacci
compute	fibonacci.cljc	/^(defn compute$/;"	f	namespace:fibonacci2
compute	fibonacci.cljc	/^(defn compute$/;"	f	namespace:fibonacciI
compute	fibonacci.exs	/^  def compute(0), do: 0 # elixir pattern-matching if the arg is = to 0 this gets executed$/;"	f	module:Fibonacci2	access:public
compute	fibonacci.exs	/^  def compute(0), do: 0$/;"	f	module:Fibonacci3	access:public
compute	fibonacci.exs	/^  def compute(1), do: 1 # = 1 do this$/;"	f	module:Fibonacci2	access:public
compute	fibonacci.exs	/^  def compute(1), do: 1$/;"	f	module:Fibonacci3	access:public
compute	fibonacci.exs	/^  def compute(n) do # compute\/1$/;"	f	module:Fibonacci	access:public
compute	fibonacci.exs	/^  def compute(n) do$/;"	f	module:FibonacciI	access:public
compute	fibonacci.exs	/^  def compute(n), do: compute(n - 1) + compute(n - 2) # else$/;"	f	module:Fibonacci2	access:public
compute	fibonacci.exs	/^  def compute(n), do: helper(n, 2, 1, 1)$/;"	f	module:Fibonacci3	access:public
deps	http/mix.exs	/^  defp deps do$/;"	f	module:MixProject	access:private
fibonacci	fibonacci.cljc	/^(ns fibonacci)$/;"	n
fibonacci2	fibonacci.cljc	/^(ns fibonacci2)$/;"	n
fibonacciI	fibonacci.cljc	/^(ns fibonacciI)$/;"	n
greets the world	http/test/http_test.exs	/^  test "greets the world" do$/;"	t	module:HttpTest
hello-world	hello.cljc	/^(ns hello-world)$/;"	n
helper	fibonacci.exs	/^  defp helper(n, current_index, current_value, _) #defp = private function | _ optional arg$/;"	f	module:Fibonacci3	access:private
helper	fibonacci.exs	/^  defp helper(n, current_index, current_value, previous_value) do$/;"	f	module:Fibonacci3	access:private
project	http/mix.exs	/^  def project do$/;"	f	module:MixProject	access:public
send_response	http/lib/http.ex	/^  def send_response(socket, response) do$/;"	f	module:Http	access:public
start	http/lib/http/application.ex	/^  def start(_type, _args) do$/;"	f	module:Application	access:public
start_link	http/lib/http.ex	/^  def start_link(port: port) do$/;"	f	module:Http	access:public
